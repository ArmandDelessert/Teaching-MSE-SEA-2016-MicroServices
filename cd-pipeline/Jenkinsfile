node {
	/*------------------------------------------------------------------------------*/
	stage 'Setup'
	/*------------------------------------------------------------------------------*/

	 // We have received the IP of the Docker host from a Jenkins job parameter
	echo "We will contact our clock micro-service via: ${CLOCK_MICROSERVICE_URL}"
	echo "We will contact our beers micro-service via: ${BEERS_MICROSERVICE_URL}"
	echo "We will access SonarQube via: ${SONAR_URL}"
	
	// Get some code from a GitHub repository
	git url: 'https://github.com/wasadigi/Teaching-MSE-SEA-2016-MicroServices.git'

	// Ask Jenkins to execute a groovy script to setup the Maven and NodeJS tools (could not do it in Jenkinsfile because of the sandbox)
	dir('cd-pipeline') {
		sh 'curl --data-urlencode script@setup.groovy http://localhost:8080/scriptText'
	}
	// Get a ref to the Maven and Node tools configured in Jenkins (so far, they need to be configured manually after booting the Docker container!)						
	def mvnHome = tool 'M3'
	env.PATH = "${mvnHome}/bin:${env.PATH}"
	def npmHome = tool 'N1'
	env.PATH = "${npmHome}/bin:${env.PATH}"
	

	/*------------------------------------------------------------------------------*/
	stage 'Commit'
	/*------------------------------------------------------------------------------*/
	
	echo "Build the clock micro-service and create a Docker image"
	// Build an executable jar of Game Dock with maven and build a corresponding Docker image
	dir('microservices/ClockService/') {
		sh "mvn clean package"		
	}		
	sh "mkdir -p docker-images/service-clock/tmp"
	sh "cp microservices/ClockService/target/*SNAPSHOT.jar docker-images/service-clock/tmp/"
	dir('docker-images/service-clock') {
		sh 'docker build -t sea/service_clock .'
	}

	echo "Ask SonarQube to run a static analysis of the code; results will be available in Sonar Web UI"
	dir('microservices/ClockService/') {
		sh "mvn sonar:sonar -Dsonar.host.url=${SONAR_URL}"	
	}

	
	echo "Build the beers micro-service and create a Docker image"
	// Build an executable jar of Game Dock with maven and build a corresponding Docker image
	dir('microservices/BeersService/') {
		sh "mvn clean package"		
	}
	sh "mkdir -p docker-images/service-beers/tmp"
	sh "cp microservices/BeersService/target/*SNAPSHOT.jar docker-images/service-beers/tmp/"
	dir('docker-images/service-beers') {
		sh 'docker build -t sea/service_beers .'
	}

	echo "Ask SonarQube to run a static analysis of the code; results will be available in Sonar Web UI"
	dir('microservices/BeersService/') {
		sh "mvn sonar:sonar -Dsonar.host.url=${SONAR_URL}"	
	}
	

	/*------------------------------------------------------------------------------*/
	stage 'Validation'
	/*------------------------------------------------------------------------------*/
	
	echo "Create a fresh test environment, by UP'ing a Docker Compose topology"
	dir('docker-topologies/topology-runtime') {
		sh "docker-compose down || true"
		sh "docker-compose up &"
	}
	
	waitUntil {
		def appIsReady = false
		try {
			echo "Checking Spring Boot status page via ${CLOCK_MICROSERVICE_URL}"
			sh "set +e; curl -f -sL -w \"%{http_code}\\n\" ${CLOCK_MICROSERVICE_URL} -o /dev/null; echo \$? > springBootAppStatus; return 0"
			def status = readFile('springBootAppStatus').trim()
			echo 'status: ' + status
			appIsReady = (status == '0')
		} catch (e) {
			echo 'exception: ' + e
			appIsReady = false
		}
		echo 'return appIsReady'
		return appIsReady == true
		
	}
	echo "The clock micro-service have been started and is ready"
	
	dir('validation') {
		sh './build-image.sh'
	}
	sh "docker run -e CLOCK_API_PREFIX=${env.CLOCK_MICROSERVICE_URL} sea/validation-api-tests"
	echo "API tests have been run."

		
	/*------------------------------------------------------------------------------*/
	stage 'End'
	/*------------------------------------------------------------------------------*/
	
	echo "We have been through the entire pipeline"

}